# üß† [NandGame](http://nandgame.com/) ‚Äì Visual Logic Gate Computer Project

Solutions and circuit screenshots for each level of **NandGame**, a browser-based game that teaches how to build a working computer starting from a single NAND gate.

Each section below includes an image of my completed logic for that level, organized by function (logic gates, memory, arithmetic, CPU, etc.).

---

## üìò Table of Contents

### 0. Logic Gates
- [0.0 Invert](#00-invert)
- [0.1 And](#01-and)
- [0.2 Or](#02-or)
- [0.3 Xor](#03-xor)

### 1. Arithmetic
- [1.0 Half Adder](#10-half-adder)
- [1.1 Full Adder](#11-full-adder)
- [1.2 Multi-bit Adder](#12-multi-bit-adder)
- [1.3 Increment](#13-increment)
- [1.4 Subtraction](#14-subtraction)
- [1.5 Equal to Zero](#15-equal-to-zero)
- [1.6 Less than Zero](#16-less-than-zero)

### 2. Plumbing
- [2.0 Selector](#20-selector)
- [2.1 Switch](#21-switch)

### 3. Memory
- [3.0 Latch](#30-latch)
- [3.1 Data Flip-Flop](#31-data-flip-flop)
- [3.2 Register](#32-register)
- [3.3 Counter](#33-counter)
- [3.4 RAM](#34-ram)

### 4. Arithmetic Logic Unit (ALU)
- [4.0 Unary ALU](#40-unary-alu)
- [4.1 ALU](#41-alu)
- [4.2 Opcodes](#42-opcodes)
- [4.3 Condition](#43-condition)

### 5. Processor
- [5.0 Combined Memory](#50-combined-memory)
- [5.1 Instruction Detector](#51-instruction-detector)
- [5.2 Control Unit](#52-control-unit)
- [5.3 Program Engine](#53-program-engine)
- [5.4 Computer](#54-computer)
- [5.5 Input and Output](#55-input-and-output)

---

## üß© Logic Gates

### 0.0 Invert  
![Invert](0_logic_gates/0_invert.png)

### 0.1 And  
![And](0_logic_gates/1_and.png)

### 0.2 Or  
![Or](0_logic_gates/2_or.png)

### 0.3 Xor  
![Xor](0_logic_gates/3_xor.png)

---

## ‚ûó Arithmetic

### 1.0 Half Adder  
![Half Adder](1_arithmetics/0_half_adder.png)

### 1.1 Full Adder  
![Full Adder](1_arithmetics/1_full_adder.png)

### 1.2 Multi-bit Adder  
![Multi-bit Adder](1_arithmetics/2_multi-bit_adder.png)

### 1.3 Increment  
![Increment](1_arithmetics/3_increment.png)

### 1.4 Subtraction  
![Subtraction](1_arithmetics/4_subtraction.png)

### 1.5 Equal to Zero  
![Equal to Zero](1_arithmetics/5_equal_to_zero.png)

### 1.6 Less than Zero  
![Less than Zero](1_arithmetics/6_less_than_zero.png)

---

## üîÄ Plumbing

### 2.0 Selector  
![Selector](2_plumbing/0_selector.png)

### 2.1 Switch  
![Switch](2_plumbing/1_switch.png)

---

## üíæ Memory

### 3.0 Latch  
![Latch](3_memory/0_latch.png)

### 3.1 Data Flip-Flop  
![Data Flip-Flop](3_memory/1_data_flip-flop.png)

### 3.2 Register  
![Register](3_memory/2_register.png)

### 3.3 Counter  
![Counter](3_memory/3_counter.png)

### 3.4 RAM  
![RAM](3_memory/4_ram.png)

---

## ‚öôÔ∏è Arithmetic Logic Unit

### 4.0 Unary ALU  
![Unary ALU](4_arithmetic_logic_unit/0_unary_alu.png)

### 4.1 ALU  
![ALU](4_arithmetic_logic_unit/1_ALU.png)

### 4.2 Opcodes  
![Opcodes](4_arithmetic_logic_unit/2_opcodes.png)

### 4.3 Condition  
![Condition](4_arithmetic_logic_unit/3_condition.png)

---

## üß† Processor

### 5.0 Combined Memory  
![Combined Memory](5_processor/0_combined_memory.png)

### 5.1 Instruction Detector  
![Instruction Detector](5_processor/1_instruction_detector.png)

### 5.2 Control Unit  
![Control Unit](5_processor/2_control_unit.png)

### 5.3 Program Engine  
![Program Engine](5_processor/3_program_engine.png)

### 5.4 Computer  
![Computer](5_processor/4_computer.png)

### 5.5 Input and Output  
![Input and Output](5_processor/5_input_and_output.png)

---

## üôã Author

**Steven Reynoso**  
üì´ [GitHub](https://github.com/StevenReynoso) | [LinkedIn](https://linkedin.com/in/steven-reynoso-729315272)

---

## üìå Credits

Inspired by:  
- [nandgame.com](https://nandgame.com/)  
- [NAND2Tetris](https://www.nand2tetris.org/)

---

## üõ†Ô∏è What's Next

- [ ] Write-ups for each module explaining design choices  
- [ ] Finish remaining processor components  
- [ ] Explore hardware (e.g., Logisim or Verilog implementation)  
